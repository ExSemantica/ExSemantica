defmodule ExsemanticaPhxWeb.PageLive do
  use ExsemanticaPhxWeb, :live_view

  @impl true
  def mount(_params, _session, socket) do
    {:ok, assign(socket, %{search_query: :search, search_results: "", search_pagey: ""})}
  end

  @impl true
  def handle_event("suggest", %{"search" => query}, socket) do
    case query do
      %{"search_input" => ""} -> {:noreply, assign(socket, %{search_results: ""})}

      %{"search_input" => nonblank} -> case String.first(nonblank) do
        "#" -> {:noreply, assign(socket, %{search_results: ~E"""
            <i>Query for interests containing <b>"<%= nonblank |> String.replace_prefix("#", "") %>"</b> returned <b><%= "%" <> String.replace_prefix(nonblank, "#", "") <> "%" |> ExsemanticaPhx.Search.interests([], :count) %></b> hits.<br>Press Enter/Return to show the results.</i>
            """})}
 
        "@" -> {:noreply, assign(socket, %{search_results: ~E"""
            <i>Query for usernames containing <b>"<%= nonblank |> String.replace_prefix("@", "") %>"</b> returned <b><%= "%" <> String.replace_prefix(nonblank, "@", "") <> "%" |> ExsemanticaPhx.Search.users([], :count) %></b> hits.<br>Press Enter/Return to show the results.</i>
            """})}

        _other -> {:noreply, assign(socket, %{search_results: ~E"""
            <i>Try using <b>@</b> or <b>#</b> before your query.</i>
            """})}
      end
    end
  end

  @impl true
  def handle_event("search", %{"search" => query}, socket) do
    case query do
      %{"search_input" => ""} -> {:noreply, assign(socket, %{search_results: ""})}

      %{"search_input" => nonblank} -> case String.first(nonblank) do
        "#" -> 
          prequery = "%" <> String.replace_prefix(nonblank, "#", "") <> "%"
          {:noreply, assign(socket, %{search_results: ~E"""
            <i>Query for interests containing <b>"<%= nonblank |> String.replace_prefix("#", "") %>"</b> returned <b><%= prequery |> ExsemanticaPhx.Search.interests([], :count) %></b> hits.<br>Results from <b><%= DateTime.utc_now |> DateTime.truncate(:second) %></b> shown.</i>
            """})}
 
        "@" ->
          prequery = "%" <> String.replace_prefix(nonblank, "@", "") <> "%"
          {:noreply, assign(socket, %{search_results: ~E"""
            <i>Query for usernames containing <b>"<%= nonblank |> String.replace_prefix("@", "") %>"</b> returned <b><%= prequery |> ExsemanticaPhx.Search.users([], :count) %></b> hits.<br>Results from <b><%= DateTime.utc_now |> DateTime.truncate(:second) %></b>.</i>
            """,
            search_pagey: prequery |> ExsemanticaPhx.Search.users([], :query) |> Stream.take(9) |> handle_user})}

        _other -> {:noreply, assign(socket, %{search_results: ~E"""
            <i>Try using <b>@</b> or <b>#</b> before your query.</i>
            """})}
      end
    end
  end

 # Interests
  defp handle_pagey(pagey), do: handle_pagey(pagey, "")

  defp handle_pagey([pagey_head | pagey_tail], html) do
    ~E"""
    <div class="rounded-lg bg-purple-300 hover:bg-purple-400 shadow-lg w-full h-32 p-4 text-sm"><%= pagey_head %></div>
    <%= handle_pagey(pagey_tail, html) %>
    """
  end

  defp handle_pagey([], html), do: html

  # Usernames
  defp handle_user(pagey), do: handle_user(pagey, "")

  defp handle_user(item, html) do
    this = item |> Stream.take(1)
    ~E"""
    <div class="rounded-lg bg-yellow-300 hover:bg-yellow-400 shadow-lg w-full h-32 p-4 text-sm"><%= this %></div>
    <%= this |> handle_user(html) %>
    """
  end
end
